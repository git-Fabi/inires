# A human-readable name for the workflow.
name: FLOCK AI Ticket Resolver (Two-Job)

# ---
# TRIGGER
# ---
# This workflow is triggered whenever a new issue is opened.
on:
  issues:
    types: [opened]

# ---
# JOBS
# ---
# This workflow is split into two distinct jobs.
jobs:
  # --- JOB 1: Read and Prepare Ticket Data ---
  # The sole purpose of this job is to read the triggering issue's data
  # and prepare it for consumption by the next job.
  read_ticket:
    runs-on: ubuntu-latest
    permissions:
      issues: read
    outputs:
      issue_title_b64: ${{ steps.set_output.outputs.issue_title_b64 }}
      issue_body_b64: ${{ steps.set_output.outputs.issue_body_b64 }}
      issue_number_b64: ${{ steps.set_output.outputs.issue_number_b64 }}
    steps:
      - id: set_output
        name: Get Issue Content
        env:
          ISSUE_TITLE: ${{ github.event.issue.title }}
          ISSUE_BODY: ${{ github.event.issue.body }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
        run: |
          title_b64=$(printf '%s' "$ISSUE_TITLE" | base64 -w 0)
          body_b64=$(printf '%s' "$ISSUE_BODY" | base64 -w 0)
          number_b64=$(printf '%s' "$ISSUE_NUMBER" | base64 -w 0)
          
          
          echo "issue_title_b64=$title_b64" >> $GITHUB_OUTPUT
          echo "issue_body_b64=$body_b64" >> $GITHUB_OUTPUT
          echo "issue_number_b64=$number_b64" >> $GITHUB_OUTPUT
          

  # --- JOB 2: Run the FLOCK Agent System ---
  # This job does the main work. It consumes the data from the first job,
  # checks out the code, and runs the agent system.
  resolve_ticket:
    name: 2. Resolve Ticket with FLOCK AI
    runs-on: ubuntu-latest
    permissions:
      # This job needs write access to issues to create branches, commits, and pull requests.
      issues: write
      contents: write
      pull-requests: write

    needs: read_ticket

    steps:
      # We check out the code in this job, as it's where the code is actually needed.
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Set up Python Environment
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      #- name: Install Project Dependencies
      #  run: pip install -r requirements.txt

      # This is the core step where we run our agent system.
      #- name: Run FLOCK Agent System
       # env:
          # We access the outputs from the 'read_ticket' job using the 'needs' context.
          # We must decode the base64 strings to get back the original title and body.
        #  ISSUE_TITLE: $(echo "${{ needs.read_ticket.outputs.issue_title_b64 }}" | base64 --decode)
         # ISSUE_BODY: $(echo "${{ needs.read_ticket.outputs.issue_body_b64 }}" | base64 --decode)
          #ISSUE_NUMBER: $(echo "${{ needs.read_ticket.outputs.issue_number_b64 }}" | base64 --decode)

          # Secrets are passed to this job, as it's the one that needs them.
          #GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          #OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

       # Finally, execute the main Python script.
        #run: python main_flock_script.py
  create_pull_request:
    name: Create Pull Request
    runs-on: ubuntu-latest
    needs: [read_ticket, create_branch]
    if: ${{ success() }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.create_branch.outputs.new_branch_name }}
          clean: 'true'
          fetch-depth: 0

      - name: Decode Issue Data
        id: decode_issue_data
        run: |
          echo "ISSUE_TITLE=$(echo '${{ needs.read_ticket.outputs.issue_title_b64 }}' | base64 --decode)" >> $GITHUB_ENV
          echo "ISSUE_BODY=$(echo '${{ needs.read_ticket.outputs.issue_body_b64 }}' | base64 --decode)" >> $GITHUB_ENV
          echo "ISSUE_NUMBER=$(echo '${{ needs.read_ticket.outputs.issue_number_b64 }}' | base64 --decode)" >> $GITHUB_ENV

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v4
        with:
          title: "${{ env.ISSUE_TITLE }} (closes #${{ env.ISSUE_NUMBER }})"
          body: "This PR resolves the issue #${{ env.ISSUE_NUMBER }}"
          branch: ${{ needs.create_branch.outputs.new_branch_name }}
          commit-message: "Resolve ticket #${{ env.ISSUE_NUMBER }}"
          author: "inirest-bot[bot]"